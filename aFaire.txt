Structure du projet :
[X] une classe Instance contenant les donnees de l'instance ----> calquer Flowshop
[X] une classe Solution
[X] une classe Solver dont heritent les algorithmes
[X] une classe principale Main

Structures des algos : <------- ATTENTION, chaque classe algorithmique doit heriter de Solver
[X] une classe NEH ----> equivalent du Greedy en ITD
[X] une classe Memetique

Bonus :
[ ] Parallelisation des calculs
[ ] Ajout d'un parametre de temps au solveur general en utilisant la classe Timer #ITD
[ ] Mettre en place des benchmarks
[X] une classe GRASP
[X] une classe ILS
[X] une classe VNS
[X] une classe Recuit Simule
[X] Tester/ameliorer les parametres du recuit simule
[X] une classe Fourmis
[ ] Analyse statistique du role des parametres des Fourmis sur plusieurs instances
[X] une classe Abeilles
[ ] une classe ANN
[X] une classe Genetique
[X] Remplacer les Enum par des Class autonomes
[J] une classe Tabou : à améliorer (pas besoin de trier ni de stocker tous les voisins)

Une fois que tout le reste est fait :
[ ] Traduire tous les commentaires en anglais ---> ATTENTION : Javadoc ne prend pas les accents français
[ ] Mettre en place tous les commentaires nécessaires
[ ] ajouter une licence GNU GPL/LPGL ou BSD ou MIT au projet (ATTENTION : ne pas oublier de rajouter le texte obligatoire a chaque fichier)
[ ] faire un README aux petits oignons

Quand tout est fait :
[ ] passer le GitHub en public
